# -*- coding: utf-8 -*-
"""real.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LTG3e9lsKdzOoaovhBRTZDEBIkMeBi0e
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df=pd.read_csv("ht.csv")
df.head()

from sklearn.metrics import classification_report

df.shape

df['Fertilizer'].unique()

df['Fertilizer'].value_counts()

df = df.dropna()

df['Fertilizer'].unique()

import seaborn as sns

for i in df.columns:
  plt.figure(figsize=(10,5))

  sns.boxplot(df[i])
  plt.show()

from sklearn.preprocessing import LabelEncoder
lc=LabelEncoder()

crop = df['Crop']

df['Crop']=lc.fit_transform(df['Crop'])
encoded_values = df['Crop']

print(dict(zip(crop, encoded_values)))

import joblib

df['Fertilizer'] = lc.fit_transform(df['Fertilizer'])

# Save the LabelEncoder in binary format
joblib.dump(lc, "label_encoder.pkl")



print("LabelEncoder saved successfully!")

df1=df.copy()
print(df1.describe())

x=df1[['Nitrogen','Phosphorus','Potassium','pH','Crop']]
y=df1[['Fertilizer']]

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,train_size=0.8,test_size=0.15,random_state=10)

from sklearn.ensemble import RandomForestClassifier

model=RandomForestClassifier(n_estimators=100,max_depth=30,min_samples_split=2,min_samples_leaf=2,max_features='sqrt',random_state=40)
model.fit(x_train,y_train)

model.score(x_test,y_test)

model.score(x_train,y_train)

from sklearn.metrics import accuracy_score

y_pred = model.predict(x_test)

accuracy_score(y_test,y_pred)*100

print("Classification Report:\n", classification_report(y_test, y_pred))

class_counts=y.count()
majority_class = class_counts.idxmax()
minority_class = class_counts.idxmin()
ratio = class_counts[majority_class] / class_counts[minority_class]
print(f"Imbalance Ratio (Majority:Minority): {ratio:.2f}")

df['Fertilizer'].value_counts()

from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from collections import Counter


X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42, stratify=y)

# Apply SMOTE to training data
smote = SMOTE(sampling_strategy='auto', random_state=42)
X_resampled, y_resampled = smote.fit_resample(X_train, y_train)

clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_resampled, y_resampled)

y_pred = clf.predict(X_test)

# Evaluate model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")
print("Classification Report:\n", classification_report(y_test, y_pred))

y_resampled.value_counts()

import pickle
with open('model.pkl','wb') as f:
  pickle.dump(model,f)
with open('model.pkl', 'rb') as f:
    model = pickle.load(f)